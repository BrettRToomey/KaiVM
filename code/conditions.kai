NON :: 0x00
EQL :: 0x01
NEQ :: 0x02
GTR :: 0x03
GTE :: 0x04
LSS :: 0x05
LSE :: 0x06
ABV :: 0x07
ABE :: 0x08
BLW :: 0x09
BLE :: 0x0A
CRY :: 0x0B
OFL :: 0x0C

shouldBranch :: fn(condition: u16, flags: u8) -> bool {
    f := cast(u16)flags

    switch condition {
    case NON: return true
    case EQL: return condition & 0x01 != 0
    case NEQ: return condition & 0x01 == 0
    case GTR: return condition & 0x02 != 0
    case GTE: return condition & 0x02 != 0 || condition & 0x01 != 0
    case LSS: return condition & 0x04 != 0
    case LSE: return condition & 0x04 != 0 || condition & 0x01 != 0
    case ABV: return condition & 0x08 != 0
    case ABE: return condition & 0x08 != 0 || condition & 0x01 != 0
    case BLW: return condition & 0x10 != 0
    case BLE: return condition & 0x10 != 0 || condition & 0x01 != 0
    case CRY: return condition & 0x20 != 0
    case OFL: return condition & 0x40 != 0
    case: return false
    }
}

getJmpName :: fn(instr: u16) -> string {
    cond: u16
    if (instr >> 8) & 0x80 == 0
        cond = instr & 0xF
    else
        cond = (instr & 0xF0) >> 4

    switch cond {
    case NON: return "jmp"
    case EQL: return "jeq"
    case NEQ: return "jne"
    case GTR: return "jg"
    case GTE: return "jge"
    case LSS: return "jl"
    case LSE: return "jle"
    case ABV: return "ja"
    case ABE: return "jae"
    case BLW: return "jb"
    case BLE: return "jbe"
    case CRY: return "jc"
    case OFL: return "jo"
    case: return "unknown condition"
    }

    // FIXME(Brett): this is a compiler bug in the all branches return check
    return "compiler bug"
}
