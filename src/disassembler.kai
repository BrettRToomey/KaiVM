#import "ops.kai"
#import "conditions.kai"
#import "ncurses.kai"

#import builtin("types") _

Colors :: enum(u32) {
    Default :: 1
    NormalMode
    HexConstant
    Register
    Subroutine
}

#library "libc"
#foreign libc {
    memcpy :: (dest, src: rawptr, size: u64) -> rawptr
    malloc :: (size: u64) -> rawptr
    printf :: (fmt: *u8, args: #cvargs ..any) -> i32
    strlen :: (str: *u8) -> u64
    fopen  :: (path: *u8, mode: *u8) -> rawptr
    fread  :: (ptr: rawptr, size: u64, nmemb: u64, file: rawptr) -> u64
}

registerNames := [0x10]string {
    "ra",
    "rb",
    "rc",
    "rd",
    "re",
    "rf",
    "rg",
    "rh",
    "ri",
    "rj",
    "acc",
    "ctr",
    "ip",
    "bp",
    "sp",
    "flg"
}

loadImmediate :: fn(instr: u16, code: []u8, ip: *u64) -> u64 {
    result: u64 = 0

    size := (instr & 0xF)
    memcpy(&result, &code[<ip], autocast size)
    <ip += cast(u64) size

    return result
}

checkFileType :: fn(input: string) -> bool {
    if input.len < 3
        return false

    s := input.len - 4
    if input[s] != 0x2E || input[s+1] != 0x62 || input[s+2] != 0x63
        return false

    return true
}

disassemble :: fn(win: rawptr, code: []u8) -> bool {
    using ncurses

    ip : u64 = 0
    for ip < code.len {
        instr: u16
        memcpy(&instr, &(code[ip]), SizeOf(u16))
        oldIp := ip
        ip += 2

        instr64 := cast(u64)instr
        if (instr >> 8) & 0x80 != 0 {
            bufferIp := ip
            imm := loadImmediate(instr, code, &bufferIp)
            instr64 |= imm << 16
        }

        wprintw(win, "%12s 0x%08lx %-13x ".raw, "".raw, oldIp, instr64)

        name := ops.getName(instr)
        opcode := (instr >> 8) & 0x7F
        if opcode == ops.HALT || opcode == ops.NOP {
            wprintw(win, "%s\n".raw, name)
            continue
        }

        if opcode == ops.JMP {
            cond := conditions.getJmpName(instr)
            wprintw(win, "%s ".raw, cond.raw)
            if (instr >> 8) & 0x80 != 0 {
                immediate := loadImmediate(instr, code, &ip)
                wprintw(win, "0x%x\n".raw, immediate)
            } else {
                rreg := (instr & 0xF0) >> 4
                wattron(win, COLOR_PAIR(autocast Colors.Register))
                wprintw(win, "%s\n".raw, registerNames[rreg].raw)
                wattroff(win, COLOR_PAIR(autocast Colors.Register))
            }

            continue
        }

        lreg := (instr & 0xF0) >> 4
        wprintw(win, "%s ".raw, name.raw)
        wattron(win, COLOR_PAIR(autocast Colors.Register))
        wprintw(win, "%s".raw, registerNames[lreg].raw)
        wattroff(win, COLOR_PAIR(autocast Colors.Register))

        if (instr >> 8) & 0x80 != 0 {
            immediate := loadImmediate(instr, code, &ip)
            wprintw(win, ", ".raw, immediate)
            wattron(win, COLOR_PAIR(autocast Colors.HexConstant))
            wprintw(win, "0x%x\n".raw, immediate)
            wattroff(win, COLOR_PAIR(autocast Colors.HexConstant))
        } else {
            rreg := instr & 0xF
            wattron(win, COLOR_PAIR(autocast Colors.Register))
            wprintw(win, ", %s\n".raw, registerNames[rreg].raw)
            wattroff(win, COLOR_PAIR(autocast Colors.Register))
        }
    }

    return true
}

main :: fn(argc: i32, argv: **u8) -> i32 {
    if argc < 2 {
        printf("error: no input files\n".raw)
        return 1
    }

    path: string
    len := strlen(argv[1])
    path.raw = argv[1]
    path.len = len + 1
    
    if !checkFileType(path) {
        printf("error: invalid file type. expected: <input>.bc\n".raw)
        return 2
    }

    input := fopen(path.raw, "rb".raw)
    if !input {
        printf("error: could not open file: '%s'\n".raw, path.raw)
        return 3
    }

    buff: [1024]u8
    count := fread(&buff[0], 1, buff.len, input)

    code: []u8
    code.raw = &buff[0]
    code.len = count

    ncurses.initscr()
    ncurses.use_default_colors()
    hasColor := ncurses.has_colors() != ncurses.FALSE
    if hasColor {
        ncurses.start_color()
        ncurses.init_pair(autocast Colors.Default, -1, -1)
        ncurses.init_pair(autocast Colors.NormalMode, ncurses.COLOR_BLACK, ncurses.COLOR_CYAN)
        ncurses.init_pair(autocast Colors.HexConstant, ncurses.COLOR_MAGENTA, -1)
        ncurses.init_pair(autocast Colors.Register, ncurses.COLOR_GREEN, -1)
        ncurses.init_pair(autocast Colors.Subroutine, ncurses.COLOR_RED, -1)
    }

    ncurses.noecho()
    win := ncurses.newwin(0, 0, 0, 0)
    ncurses.keypad(win, ncurses.TRUE)
    ncurses.scrollok(win, ncurses.TRUE)
    ncurses.wbkgd(win, ncurses.COLOR_PAIR(autocast Colors.Default))
    ncurses.wbkgd(ncurses.stdscr, ncurses.COLOR_PAIR(autocast Colors.Default))

    h, w := ncurses.getmaxyx(ncurses.stdscr)

    inputWin := ncurses.newwin(1, 0, h-1, 0)

    counter := -1

    disassemble(win, code)
    ncurses.wrefresh(win)

    for true {
        ch := ncurses.wgetch(inputWin)
        if ch == "q"
            break

        switch ch {
        case ncurses.KEY_RESIZE:
            h, w = ncurses.getmaxyx(ncurses.stdscr)
        case "e":
            counter += 1

            
            nav: string
            switch counter {
            case 0: nav = " +--<"
            case 1: nav = " |   "
            case 2: nav = "+---<"
            case 3: nav = "||   "
            case 4: nav = "||   "
            case 5: nav = "||   "
            case 6: nav = "++-->"
            case 7: nav = " |   "
            case 8: nav = " |   "
            case 9: nav = " |   "
            case 10: nav= " |   "
            case 11: nav= " +-->"
            case 12: nav= "     "
            case 13: nav= "     "
            case 14: nav= "     "; counter = -1
            }

            if counter == 9 {
                ncurses.wattron(win, ncurses.COLOR_PAIR(autocast Colors.Subroutine))
                ncurses.wprintw(win, "%12s    sym._someFunc\n".raw, nav.raw)
                ncurses.wattroff(win, ncurses.COLOR_PAIR(autocast Colors.Subroutine))
                break
            }

            ncurses.wprintw(win, "%12s 0x%08x %-13x %s\n".raw, nav.raw, 0x3cd6, 0x8b942494000, "mov edx, [esp+0x94]".raw)


        case ":":
            ncurses.wattron(win, ncurses.A_REVERSE)
            ncurses.wprintw(win, "Yo!\n".raw)
            ncurses.wattroff(win, ncurses.A_REVERSE)
        case "z":
            ncurses.wprintw(win, "%d, %d\n".raw, w, h)
        }

        ncurses.wprintw(inputWin, "%c\n".raw, ch)

        //ncurses.wrefresh(ncurses.stdscr)
        ncurses.wrefresh(win)
        ncurses.wrefresh(inputWin)
    }

    ncurses.endwin()

    return 0
}
